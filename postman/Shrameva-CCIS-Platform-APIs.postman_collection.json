{
  "info": {
    "name": "Shrameva CCIS Platform APIs",
    "description": "Complete API collection for the Shrameva CCIS (Cognitive Competency Intelligence System) Platform.\n\n## About Shrameva\nShrameva revolutionizes skill assessment and placement for engineering students through AI-powered competency measurement and personalized learning paths.\n\n## Key Features\n- 7-Competency Framework: Comprehensive skill assessment\n- CCIS Levels: 4-tier progression system\n- AI-Powered Assessment: Intelligent evaluation\n- Multi-Country Support: India and UAE markets\n- Privacy-First Design: Configurable data sharing\n\n## Core Competencies\n1. Communication\n2. Problem Solving\n3. Teamwork\n4. Adaptability\n5. Time Management\n6. Technical Skills\n7. Leadership\n\n## Getting Started\n1. Set environment variables (base_url, api_key if needed)\n2. Run the requests in sequence\n3. Check response data and status codes\n4. Use the analytics endpoints to track progress\n\nFor more information: https://shrameva.com",
    "version": "1.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "description": "Basic health check and system status verification",
      "item": [
        {
          "name": "System Health Check",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response is valid', function () {",
                  "    pm.expect(pm.response.text()).to.include('Hello World');",
                  "});",
                  "",
                  "pm.test('Response time is acceptable', function () {",
                  "    pm.expect(pm.response.responseTime).to.be.below(1000);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "text/plain"
              }
            ],
            "url": {
              "raw": "{{base_url}}/",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                ""
              ]
            },
            "description": "Basic health check to verify the API is running and accessible.\n\n**Health Indicators:**\n- Service availability\n- Response time\n- Basic functionality\n\n**Use Cases:**\n- System monitoring\n- Load balancer health checks\n- Initial connectivity testing\n- Deployment verification"
          }
        }
      ]
    },
    {
      "name": "Person Management",
      "description": "Person profile management and skill passport operations",
      "item": [
        {
          "name": "Create Person",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Test for successful person creation",
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Response has person data', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('email');",
                  "    pm.expect(jsonData).to.have.property('firstName');",
                  "    pm.expect(jsonData).to.have.property('lastName');",
                  "});",
                  "",
                  "pm.test('Skill passport is created', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('skillPassport');",
                  "    pm.expect(jsonData.skillPassport).to.have.property('competencies');",
                  "});",
                  "",
                  "// Save person ID for subsequent requests",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('person_id', jsonData.id);",
                  "    console.log('Person created with ID:', jsonData.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"firstName\": \"Rajesh\",\n  \"lastName\": \"Kumar\",\n  \"middleName\": \"Singh\",\n  \"preferredName\": \"Raj\",\n  \"email\": \"rajesh.kumar@example.com\",\n  \"phone\": \"+919876543210\",\n  \"dateOfBirth\": \"1995-08-15\",\n  \"gender\": \"MALE\",\n  \"addressLine1\": \"123 Main Street\",\n  \"addressLine2\": \"Apt 4B\",\n  \"city\": \"Mumbai\",\n  \"state\": \"Maharashtra\",\n  \"postalCode\": \"400001\",\n  \"country\": \"INDIA\",\n  \"profileVisibility\": \"CONTACTS_ONLY\",\n  \"dataSharing\": {\n    \"analytics\": true,\n    \"marketing\": false,\n    \"thirdParty\": false,\n    \"research\": true\n  },\n  \"marketingOptIn\": false,\n  \"termsAccepted\": true,\n  \"privacyPolicyAccepted\": true,\n  \"kycCompleted\": false,\n  \"source\": \"web\",\n  \"metadata\": {\n    \"referralCode\": \"REF123\",\n    \"campaign\": \"summer2025\",\n    \"device\": \"mobile\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/persons",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "persons"
              ]
            },
            "description": "Creates a new person profile in the Shrameva CCIS platform.\n\n**Features:**\n- Comprehensive validation with business rules\n- Multi-country support (India/UAE)\n- Privacy settings configuration\n- Automatic skill passport creation\n- Event-driven architecture integration\n\n**Business Rules:**\n- Age must be between 16 and 65 years\n- Email must be unique\n- Phone format validated by country\n- Terms and privacy policy acceptance required\n\n**Response:**\n- Complete person profile\n- Initialized skill passport with 7 competencies\n- Privacy-aware data serialization"
          }
        },
        {
          "name": "Get Person by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Person data is complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData).to.have.property('fullName');",
                  "    pm.expect(jsonData).to.have.property('skillPassport');",
                  "});",
                  "",
                  "pm.test('Skill passport has competencies', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.skillPassport.competencies).to.be.an('array');",
                  "    pm.expect(jsonData.skillPassport.competencies).to.have.lengthOf(7);",
                  "});",
                  "",
                  "pm.test('Privacy settings respected', function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Check that sensitive data is masked based on privacy settings",
                  "    if (jsonData.privacy && jsonData.privacy.maskEmail) {",
                  "        pm.expect(jsonData.email).to.include('***');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/persons/{{person_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "persons",
                "{{person_id}}"
              ]
            },
            "description": "Retrieves a person profile by ID with privacy-aware data serialization.\n\n**Features:**\n- Privacy-aware data masking\n- Complete skill passport information\n- CCIS competency levels\n- Multi-country support\n\n**Privacy Controls:**\n- Email/phone masking based on settings\n- Configurable data visibility\n- Profile access permissions\n\n**Response Data:**\n- Personal information (privacy-filtered)\n- Skill passport with 7 competencies\n- CCIS levels and evidence counts\n- Last updated timestamps"
          }
        },
        {
          "name": "Update Person",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Person updated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('id');",
                  "    pm.expect(jsonData.updatedAt).to.not.be.null;",
                  "});",
                  "",
                  "pm.test('Changes are reflected', function () {",
                  "    const jsonData = pm.response.json();",
                  "    // Verify the updated fields are present",
                  "    pm.expect(jsonData).to.have.property('preferredName');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"personId\": \"{{person_id}}\",\n  \"preferredName\": \"RK\",\n  \"profileVisibility\": \"PUBLIC\",\n  \"dataSharing\": {\n    \"analytics\": true,\n    \"marketing\": true,\n    \"thirdParty\": false,\n    \"research\": true\n  },\n  \"version\": 1,\n  \"reason\": \"Updating profile preferences\",\n  \"source\": \"web\",\n  \"metadata\": {\n    \"updateType\": \"profile_enhancement\",\n    \"userAgent\": \"PostmanTest\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/persons/{{person_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "persons",
                "{{person_id}}"
              ]
            },
            "description": "Updates a person profile with partial update support and optimistic concurrency control.\n\n**Features:**\n- Partial updates (only specified fields)\n- Optimistic concurrency control (version field)\n- Sensitive field change tracking\n- Audit trail support\n- Business rule validation\n\n**Validation:**\n- Reason required for email/phone changes\n- Version conflict detection\n- Field-level validation\n- Business rule enforcement\n\n**Response:**\n- Updated person profile\n- New version number\n- Change timestamp\n- Audit information"
          }
        },
        {
          "name": "List Persons",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Response has person list', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('persons');",
                  "    pm.expect(jsonData).to.have.property('pagination');",
                  "});",
                  "",
                  "pm.test('Pagination info is present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.pagination).to.have.property('total');",
                  "    pm.expect(jsonData.pagination).to.have.property('page');",
                  "    pm.expect(jsonData.pagination).to.have.property('limit');",
                  "});",
                  "",
                  "pm.test('Persons array is valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.persons).to.be.an('array');",
                  "    if (jsonData.persons.length > 0) {",
                  "        pm.expect(jsonData.persons[0]).to.have.property('id');",
                  "        pm.expect(jsonData.persons[0]).to.have.property('fullName');",
                  "    }",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/persons?page=1&limit=10&country=INDIA&verified=true&includeSkillPassport=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "persons"
              ],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number (1-based)"
                },
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Items per page (max 100)"
                },
                {
                  "key": "country",
                  "value": "INDIA",
                  "description": "Filter by country"
                },
                {
                  "key": "verified",
                  "value": "true",
                  "description": "Filter by verification status"
                },
                {
                  "key": "includeSkillPassport",
                  "value": "true",
                  "description": "Include skill passport data"
                }
              ]
            },
            "description": "Retrieves a paginated list of persons with filtering capabilities.\n\n**Query Parameters:**\n- `page`: Page number (default: 1)\n- `limit`: Items per page (max: 100, default: 10)\n- `search`: Search by name or email\n- `country`: Filter by country (INDIA, UAE)\n- `verified`: Filter by verification status\n- `ageMin/ageMax`: Age range filtering\n- `gender`: Filter by gender\n- `ccisLevel`: Filter by minimum CCIS level\n- `includeSkillPassport`: Include passport data\n\n**Response:**\n- Paginated person list\n- Summary information\n- Privacy-filtered data\n- Optional skill passport inclusion"
          }
        },
        {
          "name": "Delete Person",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Deletion confirmed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('success', true);",
                  "    pm.expect(jsonData).to.have.property('message');",
                  "});",
                  "",
                  "pm.test('Deletion timestamp present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('deletedAt');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/persons/{{person_id}}?reason=Testing&confirmDelete=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "persons",
                "{{person_id}}"
              ],
              "query": [
                {
                  "key": "reason",
                  "value": "Testing",
                  "description": "Reason for deletion (required)"
                },
                {
                  "key": "confirmDelete",
                  "value": "true",
                  "description": "Confirmation flag (required)"
                }
              ]
            },
            "description": "Deletes a person profile with proper data cleanup and audit trail.\n\n**Requirements:**\n- `reason` query parameter (required)\n- `confirmDelete=true` (required)\n- Appropriate permissions\n\n**Process:**\n- Soft deletion with audit trail\n- Data anonymization\n- External system cleanup\n- Skill passport archival\n- Event notification\n\n**Response:**\n- Deletion confirmation\n- Cleanup summary\n- Audit trail reference\n- Timestamp information"
          }
        },
        {
          "name": "Get Person Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('competencyProgress');",
                  "    pm.expect(jsonData).to.have.property('ccisLevels');",
                  "    pm.expect(jsonData).to.have.property('engagementMetrics');",
                  "});",
                  "",
                  "pm.test('CCIS levels data valid', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.ccisLevels).to.be.an('object');",
                  "    pm.expect(jsonData.ccisLevels).to.have.property('overallLevel');",
                  "});",
                  "",
                  "pm.test('Competency data complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.competencyProgress).to.be.an('array');",
                  "    pm.expect(jsonData.competencyProgress).to.have.lengthOf(7);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/persons/{{person_id}}/analytics?period=30d&includeComparisons=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "persons",
                "{{person_id}}",
                "analytics"
              ],
              "query": [
                {
                  "key": "period",
                  "value": "30d",
                  "description": "Analytics period (7d, 30d, 90d, 1y)"
                },
                {
                  "key": "includeComparisons",
                  "value": "true",
                  "description": "Include peer comparisons"
                }
              ]
            },
            "description": "Retrieves comprehensive analytics for a person's skill development and progress.\n\n**Query Parameters:**\n- `period`: Analytics timeframe (7d, 30d, 90d, 1y)\n- `includeComparisons`: Include peer comparisons\n- `competencies`: Specific competencies to analyze\n\n**Analytics Data:**\n- CCIS level progression across 7 competencies\n- Evidence submission patterns\n- Learning path progress\n- Engagement metrics\n- Placement readiness score\n- Peer comparisons (optional)\n\n**Response:**\n- Competency-wise progress\n- Overall CCIS levels\n- Trends and insights\n- Recommendations\n- Benchmarking data"
          }
        }
      ]
    },
    {
      "name": "Platform Analytics",
      "description": "Global platform analytics and summary information",
      "item": [
        {
          "name": "Get Platform Summary",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Summary data present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('totalPersons');",
                  "    pm.expect(jsonData).to.have.property('verifiedPersons');",
                  "    pm.expect(jsonData).to.have.property('avgCcisLevel');",
                  "});",
                  "",
                  "pm.test('Country breakdown available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('countryBreakdown');",
                  "    pm.expect(jsonData.countryBreakdown).to.be.an('object');",
                  "});",
                  "",
                  "pm.test('Competency stats present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('competencyDistribution');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/persons/analytics/summary",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "persons",
                "analytics",
                "summary"
              ]
            },
            "description": "Retrieves platform-wide analytics and summary statistics.\n\n**Analytics Include:**\n- Total registered persons\n- Verification statistics\n- Country-wise breakdown\n- Average CCIS levels\n- Competency distribution\n- Age demographics\n- Engagement metrics\n- Growth trends\n\n**Response Data:**\n- Platform overview\n- User demographics\n- Skill development trends\n- Regional insights\n- Performance benchmarks"
          }
        }
      ]
    },
    {
      "name": "Assessment Management",
      "description": "CCIS assessment session lifecycle management and real-time interaction",
      "item": [
        {
          "name": "Start Assessment Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Assessment session created', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('sessionId');",
                  "    pm.expect(jsonData).to.have.property('assessmentType');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "});",
                  "",
                  "// Save session ID for subsequent requests",
                  "if (pm.response.code === 201) {",
                  "    const jsonData = pm.response.json();",
                  "    pm.environment.set('session_id', jsonData.sessionId);",
                  "    console.log('Assessment session started with ID:', jsonData.sessionId);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"personId\": \"{{person_id}}\",\n  \"assessmentType\": \"comprehensive\",\n  \"culturalContext\": \"INDIA\",\n  \"languagePreference\": \"en\",\n  \"maxDuration\": 75,\n  \"assessmentPurpose\": \"initial_evaluation\",\n  \"targetCompetencies\": [\"communication\", \"problem_solving\", \"teamwork\", \"adaptability\", \"time_management\", \"technical_skills\", \"leadership\"],\n  \"accessibilityNeeds\": [],\n  \"metadata\": {\n    \"tags\": [\"new_student\", \"engineering\"],\n    \"priority\": \"normal\",\n    \"source\": \"web_app\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/assessment/start",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "assessment",
                "start"
              ]
            },
            "description": "Initiates a new CCIS assessment session with adaptive configuration.\n\n**Features:**\n- Comprehensive 7-competency assessment\n- Cultural context adaptation (India/UAE)\n- Real-time behavioral signal collection\n- Gaming detection and prevention\n- Accessibility accommodation support\n\n**Assessment Types:**\n- comprehensive: Full 7-competency assessment (60-90 min)\n- targeted: Specific competencies (30-60 min)\n- progress: Follow-up tracking (20-40 min)\n- remediation: Focused improvement (30-45 min)"
          }
        },
        {
          "name": "Submit Task Interaction",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Interaction processed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('interactionId');",
                  "    pm.expect(jsonData).to.have.property('ccisUpdate');",
                  "});",
                  "",
                  "pm.test('Behavioral signals captured', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('behavioralSignals');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"taskId\": \"task-001\",\n  \"interactionType\": \"task_attempt\",\n  \"interactionData\": {\n    \"response\": \"Sample response text\",\n    \"timeSpent\": 120,\n    \"attemptNumber\": 1,\n    \"confidence\": 0.75\n  },\n  \"behavioralSignals\": {\n    \"responseTime\": 120000,\n    \"keyboardDynamics\": {\n      \"avgKeyInterval\": 150,\n      \"typingSpeed\": 45\n    },\n    \"focusEvents\": {\n      \"focusLost\": 2,\n      \"timeOutOfFocus\": 15\n    },\n    \"navigationPattern\": {\n      \"backtrackCount\": 3,\n      \"hesitationTime\": 25\n    }\n  },\n  \"metadata\": {\n    \"timestamp\": \"2025-09-01T10:30:00Z\",\n    \"deviceType\": \"desktop\",\n    \"browserAgent\": \"Chrome/115.0\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/assessment/{{session_id}}/interact",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "assessment",
                "{{session_id}}",
                "interact"
              ]
            },
            "description": "Submits a task interaction with behavioral signal collection.\n\n**Features:**\n- Real-time CCIS calculation updates\n- Comprehensive behavioral signal capture\n- Gaming detection analysis\n- Adaptive difficulty adjustment\n- Cultural context consideration\n\n**Behavioral Signals:**\n- Response timing patterns\n- Keyboard dynamics\n- Focus and attention metrics\n- Navigation patterns\n- Confidence indicators"
          }
        },
        {
          "name": "Complete Assessment",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Assessment completed', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.equal('completed');",
                  "    pm.expect(jsonData).to.have.property('finalResults');",
                  "});",
                  "",
                  "pm.test('CCIS levels calculated', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.finalResults).to.have.property('ccisLevels');",
                  "    pm.expect(jsonData.finalResults.ccisLevels).to.have.property('overall');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/assessment/{{session_id}}/complete",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "assessment",
                "{{session_id}}",
                "complete"
              ]
            },
            "description": "Completes an assessment session and calculates final CCIS results.\n\n**Final Results Include:**\n- Overall CCIS levels for all 7 competencies\n- Confidence scores and evidence quality\n- Learning pathway recommendations\n- Intervention suggestions\n- Gaming detection summary\n- Performance analytics\n\n**Post-completion Actions:**\n- Skill passport updates\n- Learning path adjustments\n- Placement readiness assessment\n- Progress notifications"
          }
        },
        {
          "name": "Get Assessment Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Session data complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('sessionId');",
                  "    pm.expect(jsonData).to.have.property('status');",
                  "    pm.expect(jsonData).to.have.property('progress');",
                  "});",
                  "",
                  "pm.test('Current competency data available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.progress).to.have.property('currentCompetency');",
                  "    pm.expect(jsonData.progress).to.have.property('completionPercentage');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/assessment/{{session_id}}?includeAnalytics=true&includeBehavioralData=false",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "assessment",
                "{{session_id}}"
              ],
              "query": [
                {
                  "key": "includeAnalytics",
                  "value": "true",
                  "description": "Include detailed behavioral analytics"
                },
                {
                  "key": "includeBehavioralData",
                  "value": "false",
                  "description": "Include raw behavioral signal data"
                }
              ]
            },
            "description": "Retrieves detailed assessment session information and current progress.\n\n**Session Information:**\n- Current status and progress\n- Time remaining and elapsed\n- Task completion status\n- Current competency focus\n\n**Analytics Data:**\n- Real-time CCIS calculations\n- Behavioral pattern analysis\n- Gaming detection status\n- Performance trends\n- Engagement metrics"
          }
        },
        {
          "name": "Get Live Assessment Data",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Live data available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('timestamp');",
                  "    pm.expect(jsonData).to.have.property('realTimeMetrics');",
                  "});",
                  "",
                  "pm.test('Behavioral indicators present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.realTimeMetrics).to.have.property('engagementLevel');",
                  "    pm.expect(jsonData.realTimeMetrics).to.have.property('confidenceLevel');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/assessment/{{session_id}}/live",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "assessment",
                "{{session_id}}",
                "live"
              ]
            },
            "description": "Provides real-time assessment monitoring data for active sessions.\n\n**Live Metrics:**\n- Current engagement level\n- Real-time confidence tracking\n- Behavioral anomaly detection\n- Performance velocity\n- Gaming risk indicators\n\n**Real-time Features:**\n- WebSocket-based updates\n- Live behavioral analytics\n- Instant intervention triggers\n- Dynamic difficulty adjustment\n- Cultural adaptation monitoring"
          }
        },
        {
          "name": "Get Person Progress",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Progress data complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('overallProgress');",
                  "    pm.expect(jsonData).to.have.property('competencyLevels');",
                  "});",
                  "",
                  "pm.test('All competencies tracked', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.competencyLevels).to.be.an('array');",
                  "    pm.expect(jsonData.competencyLevels).to.have.lengthOf(7);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/assessment/person/{{person_id}}/progress?includeHistorical=true&includeComparative=false&includePredictive=true&timeRange=90d",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "assessment",
                "person",
                "{{person_id}}",
                "progress"
              ],
              "query": [
                {
                  "key": "includeHistorical",
                  "value": "true",
                  "description": "Include historical progression data"
                },
                {
                  "key": "includeComparative",
                  "value": "false",
                  "description": "Include peer comparison data"
                },
                {
                  "key": "includePredictive",
                  "value": "true",
                  "description": "Include predictive analytics"
                },
                {
                  "key": "timeRange",
                  "value": "90d",
                  "description": "Time range for progress analysis"
                }
              ]
            },
            "description": "Retrieves comprehensive CCIS progress analytics for a person.\n\n**Progress Analytics:**\n- Current competency levels (all 7 CCIS areas)\n- Historical progression trends\n- Learning velocity indicators\n- Milestone achievements\n\n**Predictive Insights:**\n- Projected competency development\n- Time-to-mastery estimates\n- Career readiness indicators\n- Intervention recommendations\n\n**Comparative Data:**\n- Peer group comparisons\n- Institutional benchmarks\n- Cultural context analysis"
          }
        },
        {
          "name": "Delete Assessment Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Session deleted successfully', function () {",
                  "    // No content expected for 204 response",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/assessment/{{session_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "assessment",
                "{{session_id}}"
              ]
            },
            "description": "Cancels and removes an assessment session (admin only).\n\n**Admin Functions:**\n- Emergency session termination\n- Data cleanup and anonymization\n- Audit trail maintenance\n- Resource cleanup\n\n**Use Cases:**\n- Technical issues during assessment\n- Security incidents\n- Data privacy requests\n- System maintenance"
          }
        }
      ]
    },
    {
      "name": "Session Management",
      "description": "Real-time session control, monitoring, and intervention management",
      "item": [
        {
          "name": "Get Session Details",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Session details complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('sessionState');",
                  "    pm.expect(jsonData).to.have.property('timeRemaining');",
                  "    pm.expect(jsonData).to.have.property('currentTask');",
                  "});",
                  "",
                  "pm.test('Behavioral analytics available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('behavioralAnalytics');",
                  "    pm.expect(jsonData.behavioralAnalytics).to.have.property('engagementLevel');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/session/{{session_id}}?includeAnalytics=true&includeSystemMetrics=false",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "session",
                "{{session_id}}"
              ],
              "query": [
                {
                  "key": "includeAnalytics",
                  "value": "true",
                  "description": "Include detailed behavioral analytics"
                },
                {
                  "key": "includeSystemMetrics",
                  "value": "false",
                  "description": "Include system performance metrics"
                }
              ]
            },
            "description": "Retrieves comprehensive session information including real-time state and analytics.\n\n**Session State:**\n- Current status and phase\n- Time remaining and elapsed\n- Task completion progress\n- Active competency assessment\n\n**Behavioral Analytics:**\n- Real-time engagement metrics\n- Gaming detection status\n- Performance patterns\n- Confidence progression\n\n**System Metrics:**\n- Response times and latency\n- Connection stability\n- Resource utilization"
          }
        },
        {
          "name": "Pause Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Session paused successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.equal('paused');",
                  "    pm.expect(jsonData).to.have.property('pausedAt');",
                  "});",
                  "",
                  "pm.test('Resume capability available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('resumeCapable');",
                  "    pm.expect(jsonData.resumeCapable).to.be.true;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reason\": \"technical_issue\",\n  \"estimatedResumeTime\": \"2025-09-01T11:00:00Z\",\n  \"metadata\": {\n    \"issueDescription\": \"Internet connectivity problems\",\n    \"requestedDuration\": 10\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/session/{{session_id}}/pause",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "session",
                "{{session_id}}",
                "pause"
              ]
            },
            "description": "Pauses an active assessment session with proper state preservation.\n\n**Pause Reasons:**\n- technical_issue: Technical problems\n- personal_break: Student break request\n- emergency: Emergency interruption\n- system_maintenance: Planned maintenance\n\n**State Preservation:**\n- Current progress saved\n- Timer state preserved\n- Behavioral data maintained\n- Resume capability ensured\n\n**Time Management:**\n- Pause duration tracking\n- Time limit adjustments\n- Resume deadline enforcement"
          }
        },
        {
          "name": "Resume Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Session resumed successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.status).to.equal('active');",
                  "    pm.expect(jsonData).to.have.property('resumedAt');",
                  "});",
                  "",
                  "pm.test('State restored correctly', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('restoredState');",
                  "    pm.expect(jsonData.restoredState).to.have.property('taskPosition');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"confirmResume\": true,\n  \"metadata\": {\n    \"resumeReason\": \"issue_resolved\",\n    \"readyToProgress\": true\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/session/{{session_id}}/resume",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "session",
                "{{session_id}}",
                "resume"
              ]
            },
            "description": "Resumes a paused assessment session with full state restoration.\n\n**State Restoration:**\n- Complete progress recovery\n- Timer adjustments\n- Task position restoration\n- Behavioral context maintenance\n\n**Resume Validation:**\n- Pause duration limits\n- System availability checks\n- User authentication\n- Technical readiness verification\n\n**Continuity Features:**\n- Seamless experience resumption\n- Context re-establishment\n- Adaptive difficulty adjustment"
          }
        },
        {
          "name": "Extend Session Time",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Time extended successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('newTimeLimit');",
                  "    pm.expect(jsonData).to.have.property('extensionGranted');",
                  "});",
                  "",
                  "pm.test('Extension details available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('extensionReason');",
                  "    pm.expect(jsonData).to.have.property('additionalMinutes');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"extensionMinutes\": 15,\n  \"reason\": \"accessibility_accommodation\",\n  \"justification\": \"Extended time needed due to documented learning accommodation\",\n  \"metadata\": {\n    \"accommodationType\": \"extended_time\",\n    \"approvedBy\": \"instructor\",\n    \"documentationRef\": \"ACC-2025-001\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/session/{{session_id}}/extend",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "session",
                "{{session_id}}",
                "extend"
              ]
            },
            "description": "Extends assessment session time limits with proper authorization.\n\n**Extension Reasons:**\n- accessibility_accommodation: Documented accommodations\n- technical_difficulties: System or connectivity issues\n- emergency_interruption: Unexpected emergencies\n- educator_discretion: Instructor-approved extensions\n\n**Authorization Levels:**\n- Automatic: Pre-approved accommodations\n- Instructor: Educator authorization required\n- Administrator: Admin approval needed\n- System: Algorithm-determined extensions\n\n**Limits and Controls:**\n- Maximum extension duration\n- Multiple extension tracking\n- Audit trail maintenance"
          }
        },
        {
          "name": "Get Session Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Analytics data comprehensive', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('behavioralMetrics');",
                  "    pm.expect(jsonData).to.have.property('performanceIndicators');",
                  "    pm.expect(jsonData).to.have.property('engagementAnalysis');",
                  "});",
                  "",
                  "pm.test('Real-time indicators present', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.behavioralMetrics).to.have.property('currentEngagement');",
                  "    pm.expect(jsonData.performanceIndicators).to.have.property('responseVelocity');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/session/{{session_id}}/analytics?live=false&interval=5",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "session",
                "{{session_id}}",
                "analytics"
              ],
              "query": [
                {
                  "key": "live",
                  "value": "false",
                  "description": "Enable live streaming of analytics data"
                },
                {
                  "key": "interval",
                  "value": "5",
                  "description": "Update interval in seconds for live data"
                }
              ]
            },
            "description": "Provides comprehensive real-time session analytics and behavioral insights.\n\n**Behavioral Metrics:**\n- Current engagement level\n- Response time patterns\n- Error patterns and recovery\n- Help-seeking behavior\n\n**Performance Indicators:**\n- Task completion velocity\n- Quality indicators\n- Confidence progression\n- Gaming detection alerts\n\n**System Metrics:**\n- Response latency\n- Connection stability\n- Resource utilization\n- Data quality indicators\n\n**Predictive Insights:**\n- Completion time estimates\n- Performance projections\n- Intervention recommendations"
          }
        },
        {
          "name": "Trigger Manual Intervention",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('Intervention triggered successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('interventionId');",
                  "    pm.expect(jsonData).to.have.property('deliveryMethod');",
                  "});",
                  "",
                  "pm.test('Intervention details recorded', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('interventionType');",
                  "    pm.expect(jsonData).to.have.property('urgency');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"interventionType\": \"hint\",\n  \"message\": \"Consider breaking this problem into smaller, manageable steps\",\n  \"targetCompetency\": \"problem_solving\",\n  \"urgency\": \"medium\",\n  \"deliveryMethod\": \"overlay\",\n  \"metadata\": {\n    \"hintLevel\": \"strategic\",\n    \"revealLevel\": \"process\",\n    \"estimatedHelpfulness\": 0.7,\n    \"triggeredBy\": \"instructor\"\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/session/{{session_id}}/intervention",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "session",
                "{{session_id}}",
                "intervention"
              ]
            },
            "description": "Triggers manual intervention for real-time student support during assessment.\n\n**Intervention Types:**\n- hint: Strategic guidance and hints\n- encouragement: Motivational support\n- clarification: Task clarification\n- technical_support: Technical assistance\n- accessibility_aid: Accessibility support\n\n**Delivery Methods:**\n- overlay: Non-intrusive overlay\n- modal: Attention-requiring modal\n- sidebar: Side panel notification\n- audio: Audio assistance\n- chat: Live chat support\n\n**Urgency Levels:**\n- low: Optional guidance\n- medium: Recommended intervention\n- high: Important assistance\n- critical: Immediate attention required"
          }
        },
        {
          "name": "Reset Session",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 204', function () {",
                  "    pm.response.to.have.status(204);",
                  "});",
                  "",
                  "pm.test('Session reset successfully', function () {",
                  "    // No content expected for 204 response",
                  "    pm.expect(pm.response.text()).to.be.empty;",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/session/{{session_id}}/reset",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "session",
                "{{session_id}}",
                "reset"
              ]
            },
            "description": "Completely resets an assessment session (admin only).\n\n**Reset Actions:**\n- Complete progress removal\n- State initialization\n- Timer reset\n- Data cleanup\n- Audit trail maintenance\n\n**Administrative Use Cases:**\n- Technical failure recovery\n- Security incident response\n- Testing and development\n- Data privacy compliance\n\n**Warning:** This action is irreversible and should only be used by authorized administrators."
          }
        }
      ]
    },
    {
      "name": "Advanced Analytics",
      "description": "Comprehensive analytics, reporting, and insights across all levels",
      "item": [
        {
          "name": "Get Individual Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Individual analytics complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('learningProgress');",
                  "    pm.expect(jsonData).to.have.property('behavioralPatterns');",
                  "    pm.expect(jsonData).to.have.property('performanceInsights');",
                  "});",
                  "",
                  "pm.test('Competency analysis available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData.learningProgress).to.have.property('competencyDevelopment');",
                  "    pm.expect(jsonData.performanceInsights).to.have.property('strengthsWeaknesses');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/analytics/person/{{person_id}}?timeRange=90d&includeComparative=false&includePredictive=true&format=detailed",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "analytics",
                "person",
                "{{person_id}}"
              ],
              "query": [
                {
                  "key": "timeRange",
                  "value": "90d",
                  "description": "Time range for analytics"
                },
                {
                  "key": "includeComparative",
                  "value": "false",
                  "description": "Include peer comparisons"
                },
                {
                  "key": "includePredictive",
                  "value": "true",
                  "description": "Include predictive analytics"
                },
                {
                  "key": "format",
                  "value": "detailed",
                  "description": "Analytics detail level"
                }
              ]
            },
            "description": "Provides comprehensive individual learner analytics and insights.\n\n**Learning Progress:**\n- Competency development over time\n- Learning velocity and acceleration\n- Milestone achievements\n- Areas requiring intervention\n\n**Behavioral Patterns:**\n- Learning style preferences\n- Task engagement patterns\n- Help-seeking behavior\n- Error patterns and recovery\n\n**Performance Insights:**\n- Strengths and weaknesses\n- Optimal task difficulty\n- Cultural adaptation effectiveness\n- Confidence development\n\n**Predictive Analytics:**\n- Competency projections\n- Time-to-mastery estimates\n- Career readiness indicators\n- Risk assessments"
          }
        },
        {
          "name": "Get Cohort Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Cohort analytics complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('cohortOverview');",
                  "    pm.expect(jsonData).to.have.property('performanceDistribution');",
                  "    pm.expect(jsonData).to.have.property('learningPatterns');",
                  "});",
                  "",
                  "pm.test('Comparative data available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('peerComparisons');",
                  "    pm.expect(jsonData).to.have.property('benchmarkData');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/analytics/cohort/cohort-123?timeRange=semester&includeIndividuals=false&includeBenchmarking=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "analytics",
                "cohort",
                "cohort-123"
              ],
              "query": [
                {
                  "key": "timeRange",
                  "value": "semester",
                  "description": "Time range for cohort analytics"
                },
                {
                  "key": "includeIndividuals",
                  "value": "false",
                  "description": "Include individual breakdowns"
                },
                {
                  "key": "includeBenchmarking",
                  "value": "true",
                  "description": "Include benchmark comparisons"
                }
              ]
            },
            "description": "Provides comprehensive cohort-level analytics for group performance analysis.\n\n**Cohort Overview:**\n- Overall performance metrics\n- Competency distribution\n- Progress velocity\n- Engagement levels\n\n**Performance Distribution:**\n- CCIS level distributions\n- Competency strength patterns\n- Learning outcome achievements\n- Risk factor analysis\n\n**Learning Patterns:**\n- Common learning pathways\n- Effective intervention strategies\n- Cultural adaptation insights\n- Collaborative learning benefits\n\n**Benchmarking:**\n- Historical cohort comparisons\n- Institutional benchmarks\n- Industry standards\n- Best practice identification"
          }
        },
        {
          "name": "Get Institutional Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Institutional analytics complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('institutionalOverview');",
                  "    pm.expect(jsonData).to.have.property('programEffectiveness');",
                  "    pm.expect(jsonData).to.have.property('outcomeAnalysis');",
                  "});",
                  "",
                  "pm.test('Strategic insights available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('strategicRecommendations');",
                  "    pm.expect(jsonData).to.have.property('improvementOpportunities');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/analytics/institution/inst-456?scope=comprehensive&timeRange=academic_year&includeTrends=true&includeComparisons=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "analytics",
                "institution",
                "inst-456"
              ],
              "query": [
                {
                  "key": "scope",
                  "value": "comprehensive",
                  "description": "Analytics scope level"
                },
                {
                  "key": "timeRange",
                  "value": "academic_year",
                  "description": "Time range for institutional analysis"
                },
                {
                  "key": "includeTrends",
                  "value": "true",
                  "description": "Include trend analysis"
                },
                {
                  "key": "includeComparisons",
                  "value": "true",
                  "description": "Include peer institution comparisons"
                }
              ]
            },
            "description": "Provides comprehensive institutional-level analytics for strategic decision making.\n\n**Institutional Overview:**\n- Student population metrics\n- Overall competency trends\n- Program effectiveness\n- Resource utilization\n\n**Program Effectiveness:**\n- Learning outcome achievements\n- Placement success rates\n- Employer satisfaction\n- Curriculum effectiveness\n\n**Outcome Analysis:**\n- Graduate competency profiles\n- Career progression tracking\n- Industry alignment\n- Long-term success indicators\n\n**Strategic Insights:**\n- Improvement opportunities\n- Resource optimization\n- Program enhancement recommendations\n- Competitive positioning"
          }
        },
        {
          "name": "Get Competency Analytics",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Competency analytics complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('competencyPerformance');",
                  "    pm.expect(jsonData).to.have.property('assessmentEffectiveness');",
                  "    pm.expect(jsonData).to.have.property('learningInsights');",
                  "});",
                  "",
                  "pm.test('Improvement recommendations available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('improvementRecommendations');",
                  "    pm.expect(jsonData.improvementRecommendations).to.have.property('contentOptimization');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/analytics/competency/communication?scope=global&timeRange=quarterly&includeLearningPathways=true&includeCulturalAnalysis=true",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "analytics",
                "competency",
                "communication"
              ],
              "query": [
                {
                  "key": "scope",
                  "value": "global",
                  "description": "Analytics scope level"
                },
                {
                  "key": "timeRange",
                  "value": "quarterly",
                  "description": "Time range for competency analytics"
                },
                {
                  "key": "includeLearningPathways",
                  "value": "true",
                  "description": "Include optimal learning pathway analysis"
                },
                {
                  "key": "includeCulturalAnalysis",
                  "value": "true",
                  "description": "Include cultural adaptation analysis"
                }
              ]
            },
            "description": "Provides detailed analytics for specific competencies including learning patterns and effectiveness.\n\n**Competency Performance:**\n- Assessment distribution and trends\n- Learning progression patterns\n- Common difficulty areas\n- Mastery achievement rates\n\n**Assessment Effectiveness:**\n- Task effectiveness analysis\n- Question quality indicators\n- Bias detection and mitigation\n- Cultural adaptation effectiveness\n\n**Learning Insights:**\n- Optimal learning pathways\n- Effective intervention strategies\n- Scaffolding effectiveness\n- Peer learning impact\n\n**Improvement Recommendations:**\n- Content optimization suggestions\n- Assessment enhancement opportunities\n- Intervention strategy improvements\n- Cultural adaptation refinements"
          }
        },
        {
          "name": "Get System Trends",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Trend data complete', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('platformTrends');",
                  "    pm.expect(jsonData).to.have.property('usagePatterns');",
                  "    pm.expect(jsonData).to.have.property('performanceMetrics');",
                  "});",
                  "",
                  "pm.test('Predictive insights available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('predictiveInsights');",
                  "    pm.expect(jsonData).to.have.property('forecastData');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{base_url}}/analytics/trends?timeRange=yearly&includeForecasting=true&includeBenchmarking=true&granularity=monthly",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "analytics",
                "trends"
              ],
              "query": [
                {
                  "key": "timeRange",
                  "value": "yearly",
                  "description": "Time range for trend analysis"
                },
                {
                  "key": "includeForecasting",
                  "value": "true",
                  "description": "Include predictive forecasting"
                },
                {
                  "key": "includeBenchmarking",
                  "value": "true",
                  "description": "Include industry benchmarking"
                },
                {
                  "key": "granularity",
                  "value": "monthly",
                  "description": "Data granularity level"
                }
              ]
            },
            "description": "Provides comprehensive system-wide trends and patterns for strategic insights.\n\n**Platform Trends:**\n- User growth and engagement\n- Competency development patterns\n- Assessment effectiveness trends\n- Technology adoption rates\n\n**Usage Patterns:**\n- Peak usage times and patterns\n- Geographic distribution\n- Feature utilization\n- User behavior evolution\n\n**Performance Metrics:**\n- System performance trends\n- Assessment quality improvements\n- Learning outcome trends\n- Placement success evolution\n\n**Predictive Insights:**\n- Future growth projections\n- Emerging skill demands\n- Technology requirements\n- Strategic opportunities"
          }
        },
        {
          "name": "Generate Custom Report",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('Status code is 200', function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test('Report generated successfully', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('reportId');",
                  "    pm.expect(jsonData).to.have.property('reportType');",
                  "    pm.expect(jsonData).to.have.property('generatedAt');",
                  "});",
                  "",
                  "pm.test('Report data available', function () {",
                  "    const jsonData = pm.response.json();",
                  "    pm.expect(jsonData).to.have.property('reportData');",
                  "    pm.expect(jsonData).to.have.property('downloadUrl');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"reportType\": \"competency_analysis\",\n  \"scope\": {\n    \"level\": \"institutional\",\n    \"entityIds\": [\"inst-456\"],\n    \"timeRange\": {\n      \"start\": \"2025-01-01\",\n      \"end\": \"2025-08-31\"\n    }\n  },\n  \"parameters\": {\n    \"competencies\": [\"communication\", \"problem_solving\", \"teamwork\"],\n    \"includeComparisons\": true,\n    \"includeTrends\": true,\n    \"granularity\": \"monthly\"\n  },\n  \"format\": {\n    \"outputFormat\": \"pdf\",\n    \"includeCharts\": true,\n    \"includeRawData\": false\n  },\n  \"delivery\": {\n    \"method\": \"download\",\n    \"recipients\": [\"admin@institution.edu\"]\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/analytics/custom",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "analytics",
                "custom"
              ]
            },
            "description": "Generates custom analytics reports with flexible parameters and formatting.\n\n**Report Types:**\n- competency_analysis: Detailed competency insights\n- performance_summary: Overall performance metrics\n- learning_outcomes: Educational effectiveness\n- placement_readiness: Career preparation analysis\n- system_utilization: Platform usage analytics\n\n**Scope Options:**\n- individual: Single learner analysis\n- cohort: Group-level insights\n- institutional: Organization-wide analytics\n- global: System-wide patterns\n\n**Format Options:**\n- pdf: Professional formatted reports\n- excel: Data-rich spreadsheets\n- csv: Raw data export\n- interactive: Web-based dashboards\n\n**Delivery Methods:**\n- download: Immediate download\n- email: Email delivery\n- api: Programmatic access\n- scheduled: Recurring reports"
          }
        }
      ]
    }
  ],
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:3000",
      "description": "Base URL for the Shrameva CCIS Platform API"
    },
    {
      "key": "person_id",
      "value": "",
      "description": "Person ID for testing (auto-populated from create request)"
    },
    {
      "key": "session_id",
      "value": "",
      "description": "Assessment session ID for testing (auto-populated from start request)"
    }
  ]
}
